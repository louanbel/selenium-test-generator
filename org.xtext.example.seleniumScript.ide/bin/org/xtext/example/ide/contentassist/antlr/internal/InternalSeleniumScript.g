/*
 * generated by Xtext 2.36.0
 */
grammar InternalSeleniumScript;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.services.SeleniumScriptGrammarAccess;

}
@parser::members {
	private SeleniumScriptGrammarAccess grammarAccess;

	public void setGrammarAccess(SeleniumScriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getTestsAssignment()); }
		(rule__Model__TestsAssignment)*
		{ after(grammarAccess.getModelAccess().getTestsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTest
entryRuleTest
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestAccess().getGroup()); }
		(rule__Test__Group__0)
		{ after(grammarAccess.getTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGotoAction
entryRuleGotoAction
:
{ before(grammarAccess.getGotoActionRule()); }
	 ruleGotoAction
{ after(grammarAccess.getGotoActionRule()); } 
	 EOF 
;

// Rule GotoAction
ruleGotoAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGotoActionAccess().getGroup()); }
		(rule__GotoAction__Group__0)
		{ after(grammarAccess.getGotoActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClickAction
entryRuleClickAction
:
{ before(grammarAccess.getClickActionRule()); }
	 ruleClickAction
{ after(grammarAccess.getClickActionRule()); } 
	 EOF 
;

// Rule ClickAction
ruleClickAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClickActionAccess().getGroup()); }
		(rule__ClickAction__Group__0)
		{ after(grammarAccess.getClickActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssertAction
entryRuleAssertAction
:
{ before(grammarAccess.getAssertActionRule()); }
	 ruleAssertAction
{ after(grammarAccess.getAssertActionRule()); } 
	 EOF 
;

// Rule AssertAction
ruleAssertAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssertActionAccess().getGroup()); }
		(rule__AssertAction__Group__0)
		{ after(grammarAccess.getAssertActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWriteAction
entryRuleWriteAction
:
{ before(grammarAccess.getWriteActionRule()); }
	 ruleWriteAction
{ after(grammarAccess.getWriteActionRule()); } 
	 EOF 
;

// Rule WriteAction
ruleWriteAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWriteActionAccess().getGroup()); }
		(rule__WriteAction__Group__0)
		{ after(grammarAccess.getWriteActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUncheckAllAction
entryRuleUncheckAllAction
:
{ before(grammarAccess.getUncheckAllActionRule()); }
	 ruleUncheckAllAction
{ after(grammarAccess.getUncheckAllActionRule()); } 
	 EOF 
;

// Rule UncheckAllAction
ruleUncheckAllAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUncheckAllActionAccess().getUncheck_allKeyword()); }
		'uncheck_all'
		{ after(grammarAccess.getUncheckAllActionAccess().getUncheck_allKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCheckAction
entryRuleCheckAction
:
{ before(grammarAccess.getCheckActionRule()); }
	 ruleCheckAction
{ after(grammarAccess.getCheckActionRule()); } 
	 EOF 
;

// Rule CheckAction
ruleCheckAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCheckActionAccess().getGroup()); }
		(rule__CheckAction__Group__0)
		{ after(grammarAccess.getCheckActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectAction
entryRuleSelectAction
:
{ before(grammarAccess.getSelectActionRule()); }
	 ruleSelectAction
{ after(grammarAccess.getSelectActionRule()); } 
	 EOF 
;

// Rule SelectAction
ruleSelectAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectActionAccess().getGroup()); }
		(rule__SelectAction__Group__0)
		{ after(grammarAccess.getSelectActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectorWith
entryRuleSelectorWith
:
{ before(grammarAccess.getSelectorWithRule()); }
	 ruleSelectorWith
{ after(grammarAccess.getSelectorWithRule()); } 
	 EOF 
;

// Rule SelectorWith
ruleSelectorWith 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectorWithAccess().getGroup()); }
		(rule__SelectorWith__Group__0)
		{ after(grammarAccess.getSelectorWithAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWith
entryRuleWith
:
{ before(grammarAccess.getWithRule()); }
	 ruleWith
{ after(grammarAccess.getWithRule()); } 
	 EOF 
;

// Rule With
ruleWith 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWithAccess().getGroup()); }
		(rule__With__Group__0)
		{ after(grammarAccess.getWithAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWithAttribute
entryRuleWithAttribute
:
{ before(grammarAccess.getWithAttributeRule()); }
	 ruleWithAttribute
{ after(grammarAccess.getWithAttributeRule()); } 
	 EOF 
;

// Rule WithAttribute
ruleWithAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWithAttributeAccess().getGroup()); }
		(rule__WithAttribute__Group__0)
		{ after(grammarAccess.getWithAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndAttribute
entryRuleAndAttribute
:
{ before(grammarAccess.getAndAttributeRule()); }
	 ruleAndAttribute
{ after(grammarAccess.getAndAttributeRule()); } 
	 EOF 
;

// Rule AndAttribute
ruleAndAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAttributeAccess().getGroup()); }
		(rule__AndAttribute__Group__0)
		{ after(grammarAccess.getAndAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectorHas
entryRuleSelectorHas
:
{ before(grammarAccess.getSelectorHasRule()); }
	 ruleSelectorHas
{ after(grammarAccess.getSelectorHasRule()); } 
	 EOF 
;

// Rule SelectorHas
ruleSelectorHas 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectorHasAccess().getGroup()); }
		(rule__SelectorHas__Group__0)
		{ after(grammarAccess.getSelectorHasAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseSelector
entryRuleBaseSelector
:
{ before(grammarAccess.getBaseSelectorRule()); }
	 ruleBaseSelector
{ after(grammarAccess.getBaseSelectorRule()); } 
	 EOF 
;

// Rule BaseSelector
ruleBaseSelector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseSelectorAccess().getNameAssignment()); }
		(rule__BaseSelector__NameAssignment)
		{ after(grammarAccess.getBaseSelectorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableAction
entryRuleVariableAction
:
{ before(grammarAccess.getVariableActionRule()); }
	 ruleVariableAction
{ after(grammarAccess.getVariableActionRule()); } 
	 EOF 
;

// Rule VariableAction
ruleVariableAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableActionAccess().getGroup()); }
		(rule__VariableAction__Group__0)
		{ after(grammarAccess.getVariableActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableAssignation
entryRuleVariableAssignation
:
{ before(grammarAccess.getVariableAssignationRule()); }
	 ruleVariableAssignation
{ after(grammarAccess.getVariableAssignationRule()); } 
	 EOF 
;

// Rule VariableAssignation
ruleVariableAssignation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAssignationAccess().getGroup()); }
		(rule__VariableAssignation__Group__0)
		{ after(grammarAccess.getVariableAssignationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getGotoActionParserRuleCall_0()); }
		ruleGotoAction
		{ after(grammarAccess.getActionAccess().getGotoActionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getClickActionParserRuleCall_1()); }
		ruleClickAction
		{ after(grammarAccess.getActionAccess().getClickActionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getAssertActionParserRuleCall_2()); }
		ruleAssertAction
		{ after(grammarAccess.getActionAccess().getAssertActionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getWriteActionParserRuleCall_3()); }
		ruleWriteAction
		{ after(grammarAccess.getActionAccess().getWriteActionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getGroup_4()); }
		(rule__Action__Group_4__0)
		{ after(grammarAccess.getActionAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getCheckActionParserRuleCall_5()); }
		ruleCheckAction
		{ after(grammarAccess.getActionAccess().getCheckActionParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getSelectActionParserRuleCall_6()); }
		ruleSelectAction
		{ after(grammarAccess.getActionAccess().getSelectActionParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getVariableActionParserRuleCall_7()); }
		ruleVariableAction
		{ after(grammarAccess.getActionAccess().getVariableActionParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getValueStringAssignment_0()); }
		(rule__Value__ValueStringAssignment_0)
		{ after(grammarAccess.getValueAccess().getValueStringAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getValueVariableAssignment_1()); }
		(rule__Value__ValueVariableAssignment_1)
		{ after(grammarAccess.getValueAccess().getValueVariableAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getTestKeyword_0()); }
	'test'
	{ after(grammarAccess.getTestAccess().getTestKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__1__Impl
	rule__Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getNameAssignment_1()); }
	(rule__Test__NameAssignment_1)
	{ after(grammarAccess.getTestAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__2__Impl
	rule__Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getTestAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTestAccess().getActionsAssignment_3()); }
		(rule__Test__ActionsAssignment_3)
		{ after(grammarAccess.getTestAccess().getActionsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getTestAccess().getActionsAssignment_3()); }
		(rule__Test__ActionsAssignment_3)*
		{ after(grammarAccess.getTestAccess().getActionsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_4__0__Impl
	rule__Action__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActionAction_4_0()); }
	()
	{ after(grammarAccess.getActionAccess().getActionAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getUncheckAllActionParserRuleCall_4_1()); }
	ruleUncheckAllAction
	{ after(grammarAccess.getActionAccess().getUncheckAllActionParserRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GotoAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GotoAction__Group__0__Impl
	rule__GotoAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoActionAccess().getGotoKeyword_0()); }
	'goto'
	{ after(grammarAccess.getGotoActionAccess().getGotoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GotoAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoActionAccess().getUrlAssignment_1()); }
	(rule__GotoAction__UrlAssignment_1)
	{ after(grammarAccess.getGotoActionAccess().getUrlAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClickAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClickAction__Group__0__Impl
	rule__ClickAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickActionAccess().getClickKeyword_0()); }
	'click'
	{ after(grammarAccess.getClickActionAccess().getClickKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClickAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickActionAccess().getSelectorAssignment_1()); }
	(rule__ClickAction__SelectorAssignment_1)
	{ after(grammarAccess.getClickActionAccess().getSelectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssertAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertAction__Group__0__Impl
	rule__AssertAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertActionAccess().getAssertKeyword_0()); }
	'assert'
	{ after(grammarAccess.getAssertActionAccess().getAssertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertActionAccess().getSelectorAssignment_1()); }
	(rule__AssertAction__SelectorAssignment_1)
	{ after(grammarAccess.getAssertActionAccess().getSelectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WriteAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteAction__Group__0__Impl
	rule__WriteAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteActionAccess().getWriteKeyword_0()); }
	'write'
	{ after(grammarAccess.getWriteActionAccess().getWriteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteAction__Group__1__Impl
	rule__WriteAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteActionAccess().getValueAssignment_1()); }
	(rule__WriteAction__ValueAssignment_1)
	{ after(grammarAccess.getWriteActionAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteAction__Group__2__Impl
	rule__WriteAction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteActionAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getWriteActionAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteAction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteAction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteAction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteActionAccess().getSelectorAssignment_3()); }
	(rule__WriteAction__SelectorAssignment_3)
	{ after(grammarAccess.getWriteActionAccess().getSelectorAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CheckAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CheckAction__Group__0__Impl
	rule__CheckAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckActionAccess().getCheckKeyword_0()); }
	'check'
	{ after(grammarAccess.getCheckActionAccess().getCheckKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CheckAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckActionAccess().getValueAssignment_1()); }
	(rule__CheckAction__ValueAssignment_1)
	{ after(grammarAccess.getCheckActionAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectAction__Group__0__Impl
	rule__SelectAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectActionAccess().getSelectKeyword_0()); }
	'select'
	{ after(grammarAccess.getSelectActionAccess().getSelectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectAction__Group__1__Impl
	rule__SelectAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectActionAccess().getValueAssignment_1()); }
	(rule__SelectAction__ValueAssignment_1)
	{ after(grammarAccess.getSelectActionAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectAction__Group__2__Impl
	rule__SelectAction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectActionAccess().getOfKeyword_2()); }
	'of'
	{ after(grammarAccess.getSelectActionAccess().getOfKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectAction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectActionAccess().getSelectorAssignment_3()); }
	(rule__SelectAction__SelectorAssignment_3)
	{ after(grammarAccess.getSelectActionAccess().getSelectorAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorWith__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorWith__Group__0__Impl
	rule__SelectorWith__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorWithAccess().getFirstAssignment_0()); }
	(rule__SelectorWith__FirstAssignment_0)?
	{ after(grammarAccess.getSelectorWithAccess().getFirstAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorWith__Group__1__Impl
	rule__SelectorWith__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorWithAccess().getLastAssignment_1()); }
	(rule__SelectorWith__LastAssignment_1)?
	{ after(grammarAccess.getSelectorWithAccess().getLastAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorWith__Group__2__Impl
	rule__SelectorWith__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorWithAccess().getBase_selectorAssignment_2()); }
	(rule__SelectorWith__Base_selectorAssignment_2)
	{ after(grammarAccess.getSelectorWithAccess().getBase_selectorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorWith__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorWithAccess().getGroup_3()); }
	(rule__SelectorWith__Group_3__0)?
	{ after(grammarAccess.getSelectorWithAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorWith__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorWith__Group_3__0__Impl
	rule__SelectorWith__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorWithAccess().getWAssignment_3_0()); }
	(rule__SelectorWith__WAssignment_3_0)
	{ after(grammarAccess.getSelectorWithAccess().getWAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorWith__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorWithAccess().getAndAssignment_3_1()); }
	(rule__SelectorWith__AndAssignment_3_1)*
	{ after(grammarAccess.getSelectorWithAccess().getAndAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__With__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__With__Group__0__Impl
	rule__With__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__With__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWithAccess().getWithAttributeAssignment_0()); }
	(rule__With__WithAttributeAssignment_0)
	{ after(grammarAccess.getWithAccess().getWithAttributeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__With__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__With__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__With__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWithAccess().getValueAssignment_1()); }
	(rule__With__ValueAssignment_1)
	{ after(grammarAccess.getWithAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WithAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WithAttribute__Group__0__Impl
	rule__WithAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WithAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWithAttributeAccess().getWithKeyword_0()); }
	'with'
	{ after(grammarAccess.getWithAttributeAccess().getWithKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WithAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WithAttribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WithAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWithAttributeAccess().getAttributeAssignment_1()); }
	(rule__WithAttribute__AttributeAssignment_1)
	{ after(grammarAccess.getWithAttributeAccess().getAttributeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndAttributeAssignment_0()); }
	(rule__And__AndAttributeAssignment_0)
	{ after(grammarAccess.getAndAccess().getAndAttributeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getValueAssignment_1()); }
	(rule__And__ValueAssignment_1)
	{ after(grammarAccess.getAndAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndAttribute__Group__0__Impl
	rule__AndAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAttributeAccess().getAndKeyword_0()); }
	'and'
	{ after(grammarAccess.getAndAttributeAccess().getAndKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndAttribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAttributeAccess().getAttributeAssignment_1()); }
	(rule__AndAttribute__AttributeAssignment_1)
	{ after(grammarAccess.getAndAttributeAccess().getAttributeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectorHas__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorHas__Group__0__Impl
	rule__SelectorHas__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorHas__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorHasAccess().getBase_selectorAssignment_0()); }
	(rule__SelectorHas__Base_selectorAssignment_0)
	{ after(grammarAccess.getSelectorHasAccess().getBase_selectorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorHas__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorHas__Group__1__Impl
	rule__SelectorHas__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorHas__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorHasAccess().getHasKeyword_1()); }
	'has'
	{ after(grammarAccess.getSelectorHasAccess().getHasKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorHas__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorHas__Group__2__Impl
	rule__SelectorHas__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorHas__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorHasAccess().getAttributeAssignment_2()); }
	(rule__SelectorHas__AttributeAssignment_2)
	{ after(grammarAccess.getSelectorHasAccess().getAttributeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorHas__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectorHas__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorHas__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorHasAccess().getValueAssignment_3()); }
	(rule__SelectorHas__ValueAssignment_3)
	{ after(grammarAccess.getSelectorHasAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAction__Group__0__Impl
	rule__VariableAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableActionAccess().getLetKeyword_0()); }
	'let'
	{ after(grammarAccess.getVariableActionAccess().getLetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAction__Group__1__Impl
	rule__VariableAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableActionAccess().getNameAssignment_1()); }
	(rule__VariableAction__NameAssignment_1)
	{ after(grammarAccess.getVariableActionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableActionAccess().getAssignationAssignment_2()); }
	(rule__VariableAction__AssignationAssignment_2)
	{ after(grammarAccess.getVariableActionAccess().getAssignationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignation__Group__0__Impl
	rule__VariableAssignation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignationAccess().getAsKeyword_0()); }
	'as'
	{ after(grammarAccess.getVariableAssignationAccess().getAsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignation__Group__1__Impl
	rule__VariableAssignation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignationAccess().getAttributeAssignment_1()); }
	(rule__VariableAssignation__AttributeAssignment_1)
	{ after(grammarAccess.getVariableAssignationAccess().getAttributeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignation__Group__2__Impl
	rule__VariableAssignation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignationAccess().getOfKeyword_2()); }
	'of'
	{ after(grammarAccess.getVariableAssignationAccess().getOfKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignation__Group__3__Impl
	rule__VariableAssignation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignationAccess().getSelectorAssignment_3()); }
	(rule__VariableAssignation__SelectorAssignment_3)
	{ after(grammarAccess.getVariableAssignationAccess().getSelectorAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignationAccess().getGroup_4()); }
	(rule__VariableAssignation__Group_4__0)?
	{ after(grammarAccess.getVariableAssignationAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignation__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignation__Group_4__0__Impl
	rule__VariableAssignation__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignationAccess().getAtKeyword_4_0()); }
	'at'
	{ after(grammarAccess.getVariableAssignationAccess().getAtKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignation__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignationAccess().getPositionAssignment_4_1()); }
	(rule__VariableAssignation__PositionAssignment_4_1)
	{ after(grammarAccess.getVariableAssignationAccess().getPositionAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__TestsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTestsTestParserRuleCall_0()); }
		ruleTest
		{ after(grammarAccess.getModelAccess().getTestsTestParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__ActionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getActionsActionParserRuleCall_3_0()); }
		ruleAction
		{ after(grammarAccess.getTestAccess().getActionsActionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoAction__UrlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGotoActionAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getGotoActionAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickAction__SelectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickActionAccess().getSelectorSelectorWithParserRuleCall_1_0()); }
		ruleSelectorWith
		{ after(grammarAccess.getClickActionAccess().getSelectorSelectorWithParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertAction__SelectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssertActionAccess().getSelectorSelectorHasParserRuleCall_1_0()); }
		ruleSelectorHas
		{ after(grammarAccess.getAssertActionAccess().getSelectorSelectorHasParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteAction__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteActionAccess().getValueValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getWriteActionAccess().getValueValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteAction__SelectorAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteActionAccess().getSelectorSelectorWithParserRuleCall_3_0()); }
		ruleSelectorWith
		{ after(grammarAccess.getWriteActionAccess().getSelectorSelectorWithParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckAction__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckActionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCheckActionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectActionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSelectActionAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectAction__SelectorAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectActionAccess().getSelectorSelectorWithParserRuleCall_3_0()); }
		ruleSelectorWith
		{ after(grammarAccess.getSelectActionAccess().getSelectorSelectorWithParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__FirstAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorWithAccess().getFirstFirstKeyword_0_0()); }
		(
			{ before(grammarAccess.getSelectorWithAccess().getFirstFirstKeyword_0_0()); }
			'first'
			{ after(grammarAccess.getSelectorWithAccess().getFirstFirstKeyword_0_0()); }
		)
		{ after(grammarAccess.getSelectorWithAccess().getFirstFirstKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__LastAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorWithAccess().getLastLastKeyword_1_0()); }
		(
			{ before(grammarAccess.getSelectorWithAccess().getLastLastKeyword_1_0()); }
			'last'
			{ after(grammarAccess.getSelectorWithAccess().getLastLastKeyword_1_0()); }
		)
		{ after(grammarAccess.getSelectorWithAccess().getLastLastKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__Base_selectorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorWithAccess().getBase_selectorBaseSelectorParserRuleCall_2_0()); }
		ruleBaseSelector
		{ after(grammarAccess.getSelectorWithAccess().getBase_selectorBaseSelectorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__WAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorWithAccess().getWWithParserRuleCall_3_0_0()); }
		ruleWith
		{ after(grammarAccess.getSelectorWithAccess().getWWithParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorWith__AndAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorWithAccess().getAndAndParserRuleCall_3_1_0()); }
		ruleAnd
		{ after(grammarAccess.getSelectorWithAccess().getAndAndParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__With__WithAttributeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWithAccess().getWithAttributeWithAttributeParserRuleCall_0_0()); }
		ruleWithAttribute
		{ after(grammarAccess.getWithAccess().getWithAttributeWithAttributeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__With__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWithAccess().getValueValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getWithAccess().getValueValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WithAttribute__AttributeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWithAttributeAccess().getAttributeIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getWithAttributeAccess().getAttributeIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__AndAttributeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getAndAttributeAndAttributeParserRuleCall_0_0()); }
		ruleAndAttribute
		{ after(grammarAccess.getAndAccess().getAndAttributeAndAttributeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getValueValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getAndAccess().getValueValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndAttribute__AttributeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAttributeAccess().getAttributeIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAndAttributeAccess().getAttributeIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorHas__Base_selectorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorHasAccess().getBase_selectorBaseSelectorParserRuleCall_0_0()); }
		ruleBaseSelector
		{ after(grammarAccess.getSelectorHasAccess().getBase_selectorBaseSelectorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorHas__AttributeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorHasAccess().getAttributeIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getSelectorHasAccess().getAttributeIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectorHas__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorHasAccess().getValueValueParserRuleCall_3_0()); }
		ruleValue
		{ after(grammarAccess.getSelectorHasAccess().getValueValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSelector__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseSelectorAccess().getNameSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getBaseSelectorAccess().getNameSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAction__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableActionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableActionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAction__AssignationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableActionAccess().getAssignationVariableAssignationParserRuleCall_2_0()); }
		ruleVariableAssignation
		{ after(grammarAccess.getVariableActionAccess().getAssignationVariableAssignationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__AttributeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAssignationAccess().getAttributeIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAssignationAccess().getAttributeIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__SelectorAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAssignationAccess().getSelectorSelectorWithParserRuleCall_3_0()); }
		ruleSelectorWith
		{ after(grammarAccess.getVariableAssignationAccess().getSelectorSelectorWithParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignation__PositionAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAssignationAccess().getPositionINTTerminalRuleCall_4_1_0()); }
		RULE_INT
		{ after(grammarAccess.getVariableAssignationAccess().getPositionINTTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__ValueStringAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getValueStringSTRINGTerminalRuleCall_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getValueAccess().getValueStringSTRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__ValueVariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getValueVariableVariableActionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getValueAccess().getValueVariableVariableActionIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getValueAccess().getValueVariableVariableActionIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getValueAccess().getValueVariableVariableActionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
