/**
 * generated by Xtext 2.36.0
 */
package org.xtext.example.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.seleniumScript.Action;
import org.xtext.example.seleniumScript.And;
import org.xtext.example.seleniumScript.AssertAction;
import org.xtext.example.seleniumScript.ClickAction;
import org.xtext.example.seleniumScript.GotoAction;
import org.xtext.example.seleniumScript.SelectorHas;
import org.xtext.example.seleniumScript.SelectorWith;
import org.xtext.example.seleniumScript.Test;
import org.xtext.example.seleniumScript.Value;
import org.xtext.example.seleniumScript.VariableAction;
import org.xtext.example.seleniumScript.VariableAssignation;

@SuppressWarnings("all")
public class SeleniumScriptGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Test> _filter = Iterables.<Test>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Test.class);
    for (final Test e : _filter) {
      String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
      String _plus = ("Tests/Test" + _string);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, this.compile(e));
    }
    fsa.generateFile("Tests/AllTestsRunner.java", this.compileMainClass(Iterables.<Test>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Test.class)));
  }

  private CharSequence compile(final Test test) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package Tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.openqa.selenium.By;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebElement;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.chrome.ChromeDriver;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Test");
    String _name = test.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("private WebDriver driver;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Test");
    String _name_1 = test.getName();
    _builder.append(_name_1, "    ");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.append("this.driver = new ChromeDriver();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void runTest() {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("try {");
    _builder.newLine();
    {
      EList<Action> _actions = test.getActions();
      for(final Action action : _actions) {
        _builder.append("\t        ");
        CharSequence _compile = this.compile(action);
        _builder.append(_compile, "\t        ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t    ");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("driver.quit();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  private CharSequence compileMainClass(final Iterable<Test> tests) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package Tests;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class AllTestsRunner {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    {
      for(final Test test : tests) {
        _builder.append("\t    ");
        _builder.append("System.out.println(\"Running test: ");
        String _name = test.getName();
        _builder.append(_name, "\t    ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t    ");
        _builder.append("new Test");
        String _name_1 = test.getName();
        _builder.append(_name_1, "\t    ");
        _builder.append("().runTest();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"All tests completed.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  private CharSequence compile(final Action action) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((action instanceof ClickAction)) {
        CharSequence _compile = this.compile(((ClickAction) action));
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        if ((action instanceof AssertAction)) {
          CharSequence _compile_1 = this.compile(((AssertAction) action));
          _builder.append(_compile_1);
          _builder.newLineIfNotEmpty();
        } else {
          if ((action instanceof GotoAction)) {
            CharSequence _compile_2 = this.compile(((GotoAction) action));
            _builder.append(_compile_2);
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("// Unsupported action type");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }

  private CharSequence compile(final ClickAction action) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement element = driver.findElement(By.cssSelector(\"");
    CharSequence _compile = this.compile(action.getSelector());
    _builder.append(_compile);
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("element.click();");
    _builder.newLine();
    return _builder;
  }

  private CharSequence compile(final AssertAction action) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement element = driver.findElement(By.cssSelector(\"");
    CharSequence _compile = this.compile(action.getSelector());
    _builder.append(_compile);
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("element.isDisplayed();");
    _builder.newLine();
    return _builder;
  }

  private CharSequence compile(final GotoAction action) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.get(\"");
    String _url = action.getUrl();
    _builder.append(_url);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  private CharSequence compile(final SelectorWith selector) {
    StringConcatenation _builder = new StringConcatenation();
    String _base_selector = selector.getBase_selector();
    _builder.append(_base_selector);
    _builder.append("[");
    String _attribute = selector.getW().getWithAttribute().getAttribute();
    _builder.append(_attribute);
    _builder.append("=\\\"");
    Value _value = selector.getW().getValue();
    _builder.append(_value);
    _builder.append("\\\"]");
    CharSequence _compile = this.compile(selector.getAnd());
    _builder.append(_compile);
    return _builder;
  }

  private CharSequence compile(final EList<And> lAnd) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final And and : lAnd) {
        _builder.append("[");
        String _attribute = and.getAndAttribute().getAttribute();
        _builder.append(_attribute);
        _builder.append("=\\\"");
        CharSequence _compile = this.compile(and.getValue());
        _builder.append(_compile);
        _builder.append("\\\"]");
      }
    }
    return _builder;
  }

  private CharSequence compile(final Value value) {
    throw new Error("Unresolved compilation problems:"
      + "\nIncompatible conditional operand types Value and String");
  }

  private CharSequence compile(final VariableAction action) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }

  private CharSequence compile(final VariableAssignation assignation) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compile = this.compile(assignation.getSelector());
    _builder.append(_compile);
    _builder.append("[");
    String _attribute = assignation.getAttribute();
    _builder.append(_attribute);
    _builder.append("]");
    return _builder;
  }

  private CharSequence compile(final SelectorHas selector) {
    StringConcatenation _builder = new StringConcatenation();
    String _base_selector = selector.getBase_selector();
    _builder.append(_base_selector);
    _builder.append("[");
    String _attribute = selector.getAttribute();
    _builder.append(_attribute);
    _builder.append("=\\\"");
    Value _value = selector.getValue();
    _builder.append(_value);
    _builder.append("\\\"]");
    return _builder;
  }
}
