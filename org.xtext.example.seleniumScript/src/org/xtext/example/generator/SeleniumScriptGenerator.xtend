/*
	 * generated by Xtext 2.36.0
 */
package org.xtext.example.generator;

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.xtext.example.seleniumScript.Action
import org.xtext.example.seleniumScript.ClickAction
import org.xtext.example.seleniumScript.GotoAction
import org.xtext.example.seleniumScript.Test
import org.xtext.example.seleniumScript.SelectorHas
import org.xtext.example.seleniumScript.SelectorWith
import org.xtext.example.seleniumScript.And
import org.eclipse.emf.common.util.EList
import org.xtext.example.seleniumScript.VariableAction
import org.xtext.example.seleniumScript.Value
import org.xtext.example.seleniumScript.BaseSelector
import org.xtext.example.seleniumScript.WriteAction
import org.xtext.example.seleniumScript.SelectAction
import org.xtext.example.seleniumScript.AssertAction
import org.xtext.example.seleniumScript.UncheckAllAction
import org.xtext.example.seleniumScript.CheckAction
import org.xtext.example.seleniumScript.With

public class SeleniumScriptGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider
	
	private int elementCounter = 0;
	
	private def resetElementCounter() {
		elementCounter = 0;
	}
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(Test)) {
			fsa.generateFile("Tests/Test" + e.fullyQualifiedName.toString("/") + ".java", e.compile)
			resetElementCounter();
		}

		fsa.generateFile("Tests/AllTestsRunner.java", compileMainClass(resource.allContents.toIterable.filter(Test)))
	}

	
	private def compile(Test test) '''
		package Tests;

		import java.time.Duration;
		import java.util.List;
		import java.net.URI;

		import org.openqa.selenium.By;
		import org.openqa.selenium.WebDriver;
		import org.openqa.selenium.WebElement;
		import org.openqa.selenium.chrome.ChromeDriver;
		import org.openqa.selenium.JavascriptExecutor;
		import org.openqa.selenium.support.ui.Select;
		import org.openqa.selenium.support.ui.WebDriverWait;
		import org.openqa.selenium.support.ui.ExpectedConditions;

		public class Test«test.getName()» {
		    private WebDriver driver;
		
		    public Test«test.getName()»() {
			    this.driver = new ChromeDriver();
		    }

		    public boolean runTest() {
			    try {
			    	JavascriptExecutor js = (JavascriptExecutor) driver;
			        «FOR action : test.actions»
			        	«action.compile()»
			        «ENDFOR»
			        System.out.println("Test «test.getName()» PASSED");
			        return true;
			    } catch (Exception e) {
			        System.err.println("Test «test.getName()» FAILED: " + e.getMessage());
			        return false;
			    } finally {
			        driver.quit();
			    }
		    }
		}
	'''

	private def compileMainClass(Iterable<Test> tests) '''
		package Tests;

		public class AllTestsRunner {
		
		    public static void main(String[] args) {
				int passed = 0;
				int failed = 0;

			    «FOR test : tests»
			    System.out.println("Running test: «test.getName()»");
			    if (new Test«test.getName()»().runTest()) {
			    	passed++;
			    } else {
			    	failed++;
			    }
			    «ENDFOR»
			
				System.out.println("All tests completed.");
				System.out.println("Summary: " + passed + " test(s) passed, " + failed + " test(s) failed.");
			}
		}
	'''

	private def compile(Action action) '''
		«IF action instanceof ClickAction»
			«(action as ClickAction).compile()»
		«ELSEIF action instanceof AssertAction»
			«(action as AssertAction).compile()»
		«ELSEIF action instanceof UncheckAllAction»
			«(action as UncheckAllAction).compile()»
		«ELSEIF action instanceof GotoAction»
			«(action as GotoAction).compile()»
		«ELSEIF action instanceof VariableAction»
			«(action as VariableAction).compile()»
		«ELSEIF action instanceof WriteAction»
			«(action as WriteAction).compile()»
		«ELSEIF action instanceof SelectAction»
			«(action as SelectAction).compile()»
		«ELSEIF action instanceof CheckAction»
			«(action as CheckAction).compile()»
		«ENDIF»'''

	private def compile(UncheckAllAction action) '''
    List<WebElement> checkboxes«elementCounter++» = driver.findElements(By.xpath("//input[@type='checkbox' and @checked]"));

    for (WebElement _checkbox: checkboxes«elementCounter-1») {
        if (_checkbox.isSelected()) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", _checkbox);
            _checkbox.click();
        }
    }
    System.out.println("[INFO] Unchecked all checkboxes");
	'''
	private def compile(CheckAction action) '''
	    WebElement label«elementCounter++» = driver.findElement(
	        By.xpath("//label[contains(., '«action.value»')]")
	    );

	    String inputId«elementCounter++» = label«elementCounter-2».getAttribute("for");
	    WebElement checkbox«elementCounter-1» = driver.findElement(
	        By.id(inputId«elementCounter-1»)
	    );
	    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", checkbox«elementCounter-1»);

	    if (!checkbox«elementCounter-1».isSelected()) {
	        checkbox«elementCounter-1».click();
	    }
	'''	

	private def compile(SelectAction action) '''
	    WebElement select«elementCounter++» = driver.findElement(«action.selector.compile().toString().trim()»);

	    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", select«elementCounter-1»);
	    select«elementCounter-1».click();

	    WebElement option«elementCounter++» = driver.findElement(
	        By.xpath("//ul[@class='list']/li[contains(., '«action.value.trim»')]")
	    );
	    option«elementCounter-1».click();
	    System.out.println("[INFO] Selected element: '«action.value.trim»'");
	'''
	
	private def compile(WriteAction writeAction) '''
		WebElement element«elementCounter++» = driver.findElement(«writeAction.selector.compile().toString().trim()»);
		element«elementCounter-1».sendKeys("«writeAction.value.compile().toString().trim()»");
		System.out.println("[INFO] Wrote text: '«writeAction.value.compile().toString().trim()»' in input");
	'''
	private def compile(ClickAction action) '''
	    WebElement element«elementCounter++» = driver.findElement(
		    «IF action.selector.w != null && action.selector.w.withAttribute.attribute == "text"»
		    By.xpath("//«action.selector.base_selector.compile().toString().trim()»[contains(., '«action.selector.w.value.compile().toString().trim()»')]")
		    «ELSE»«action.selector.compile().toString().trim()»«ENDIF»);
	    js.executeScript("arguments[0].click();", element«elementCounter-1»);
	    System.out.println("[INFO] Clicked button");
	'''

	private def compile(AssertAction action) '''
	    «IF action.selector.attribute == "href"»
	        try {
	            String relativePath = new URI("«action.selector.value.compile().toString().trim()»").getPath();
	            WebDriverWait wait«elementCounter++» = new WebDriverWait(driver, Duration.ofSeconds(10));
	            WebElement element«elementCounter++» = wait«elementCounter-2».until(ExpectedConditions.visibilityOfElementLocated(
	                By.xpath("//«action.selector.base_selector.compile().toString().trim()»[contains(@href, '" + relativePath + "')]")
	            ));
	            element«elementCounter-1».isDisplayed();
	            System.out.println("[INFO] Assert is true");
	        } catch (Exception e) {
	            throw new RuntimeException("Error processing URI for href: «action.selector.value.compile().toString().trim()»", e);
	        }
		«ELSE»
	    WebElement element«elementCounter++» = driver.findElement(
		    «IF action.selector.attribute == "text"»
		    By.xpath("//«action.selector.base_selector.compile().toString().trim()»[contains(., '«action.selector.value.compile().toString().trim()»')]")
		    «ELSE»
		    By.xpath("//«action.selector.base_selector.compile().toString().trim()»[contains(@«action.selector.attribute», '«action.selector.value.compile().toString().trim()»')]")
		    «ENDIF»);
	    element«elementCounter-1».isDisplayed();
	    System.out.println("[INFO] Assert is true");
	    «ENDIF»
	'''

	private def compile(GotoAction action) '''
		driver.get("«action.getUrl()»");
		System.out.println("[INFO] Went to URL: «action.getUrl()»");
	'''

	private def compile(BaseSelector baseSelector)'''
		«IF baseSelector.getName() == "body"»div«ELSE»«baseSelector.getName()»«ENDIF»'''
	
	private def compile(SelectorWith selector) {
	    val baseSelector = selector.base_selector.compile().toString().trim
	    val withCondition = if (selector.w !== null) selector.w.compileCondition().toString().trim else ""
	    val andConditions = selector.and.compile().toString().trim
	    val position = if (selector.isLast()) "[last()]" else if (selector.isFirst()) "[1]" else ""
	
	    '''By.xpath("(//«baseSelector»«withCondition»«andConditions»)«position»")'''
	}

	private def compileCondition(With withClause) '''
	    «IF withClause.withAttribute.attribute == "label"»
	        [@id=//label[contains(., '«withClause.value.compile().toString().trim()»')]/@for]
	    «ELSEIF withClause.withAttribute.attribute == "text"»
	        [contains(., '«withClause.value.compile().toString().trim()»')]
	    «ELSE»
	        [@«withClause.withAttribute.attribute»=\"«withClause.value.compile().toString().trim()»\"]
	    «ENDIF»
	'''

	private def compile(EList<And> lAnd) '''«FOR and: lAnd»[«and.andAttribute.attribute»=\"_«and.value.compile().toString().trim()»\"]«ENDFOR»'''
	
	private def compile(Value value) '''
	    «IF value.valueString != null»
	        «value.valueString»
	    «ELSEIF value.valueVariable != null»
	    	" + _«value.valueVariable.getName()» + "
		«ENDIF»'''
	
	private def compile(VariableAction action) '''
	WebDriverWait wait«elementCounter++» = new WebDriverWait(driver, Duration.ofSeconds(10));
	List<WebElement> elements«elementCounter++» = wait«elementCounter-2».until(ExpectedConditions.visibilityOfAllElementsLocatedBy(
	«action.assignation.selector.compile().toString().trim()»
	));
	
	WebElement element«elementCounter++» = elements«elementCounter-2».get(«action.assignation.position»);
	
	String _«action.getName()» = «IF action.assignation.attribute == "text"»
		element«elementCounter-1».getText();
	«ELSE»
		element«elementCounter-1».getAttribute("«action.assignation.attribute»");
	«ENDIF»
	System.out.println("[INFO] Created variable: _«action.getName()» with value: " + _«action.getName()»);
	'''	
	
	private def compile(SelectorHas selector) '''«selector.base_selector.compile()»[«selector.attribute»=\"«selector.value»\"]'''
}
