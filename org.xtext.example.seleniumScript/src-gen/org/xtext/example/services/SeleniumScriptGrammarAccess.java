/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SeleniumScriptGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.Model");
		private final Assignment cTestsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_0 = (RuleCall)cTestsAssignment.eContents().get(0);
		
		//Model:
		//    tests+=Test*;
		@Override public ParserRule getRule() { return rule; }
		
		//tests+=Test*
		public Assignment getTestsAssignment() { return cTestsAssignment; }
		
		//Test
		public RuleCall getTestsTestParserRuleCall_0() { return cTestsTestParserRuleCall_0; }
	}
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		
		//Test:
		//    'test' name=ID':'
		//        (
		//            actions+=Action
		//        )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'test' name=ID':'
		//    (
		//        actions+=Action
		//    )+
		public Group getGroup() { return cGroup; }
		
		//'test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(
		//    actions+=Action
		//)+
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_3_0() { return cActionsActionParserRuleCall_3_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGotoActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClickActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssertActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWriteActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cActionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cUncheckAllActionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cSelectActionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVariableActionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Action:
		//    GotoAction | ClickAction | AssertAction | WriteAction | {Action} UncheckAllAction | SelectAction | VariableAction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//GotoAction | ClickAction | AssertAction | WriteAction | {Action} UncheckAllAction | SelectAction | VariableAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GotoAction
		public RuleCall getGotoActionParserRuleCall_0() { return cGotoActionParserRuleCall_0; }
		
		//ClickAction
		public RuleCall getClickActionParserRuleCall_1() { return cClickActionParserRuleCall_1; }
		
		//AssertAction
		public RuleCall getAssertActionParserRuleCall_2() { return cAssertActionParserRuleCall_2; }
		
		//WriteAction
		public RuleCall getWriteActionParserRuleCall_3() { return cWriteActionParserRuleCall_3; }
		
		//{Action} UncheckAllAction
		public Group getGroup_4() { return cGroup_4; }
		
		//{Action}
		public Action getActionAction_4_0() { return cActionAction_4_0; }
		
		//UncheckAllAction
		public RuleCall getUncheckAllActionParserRuleCall_4_1() { return cUncheckAllActionParserRuleCall_4_1; }
		
		//SelectAction
		public RuleCall getSelectActionParserRuleCall_5() { return cSelectActionParserRuleCall_5; }
		
		//VariableAction
		public RuleCall getVariableActionParserRuleCall_6() { return cVariableActionParserRuleCall_6; }
	}
	public class GotoActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.GotoAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlURLTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//GotoAction:
		//    'goto' url=URL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'goto' url=URL
		public Group getGroup() { return cGroup; }
		
		//'goto'
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//url=URL
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//URL
		public RuleCall getUrlURLTerminalRuleCall_1_0() { return cUrlURLTerminalRuleCall_1_0; }
	}
	public class ClickActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.ClickAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectorSelectorWithParserRuleCall_1_0 = (RuleCall)cSelectorAssignment_1.eContents().get(0);
		
		//ClickAction:
		//    'click' selector=SelectorWith
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'click' selector=SelectorWith
		public Group getGroup() { return cGroup; }
		
		//'click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//selector=SelectorWith
		public Assignment getSelectorAssignment_1() { return cSelectorAssignment_1; }
		
		//SelectorWith
		public RuleCall getSelectorSelectorWithParserRuleCall_1_0() { return cSelectorSelectorWithParserRuleCall_1_0; }
	}
	public class AssertActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.AssertAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectorSelectorHasParserRuleCall_1_0 = (RuleCall)cSelectorAssignment_1.eContents().get(0);
		
		//AssertAction:
		//    'assert' selector=SelectorHas
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'assert' selector=SelectorHas
		public Group getGroup() { return cGroup; }
		
		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//selector=SelectorHas
		public Assignment getSelectorAssignment_1() { return cSelectorAssignment_1; }
		
		//SelectorHas
		public RuleCall getSelectorSelectorHasParserRuleCall_1_0() { return cSelectorSelectorHasParserRuleCall_1_0; }
	}
	public class WriteActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.WriteAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWriteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSelectorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelectorSelectorWithParserRuleCall_3_0 = (RuleCall)cSelectorAssignment_3.eContents().get(0);
		
		//WriteAction:
		//    'write' value=STRING 'in' selector=SelectorWith
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'write' value=STRING 'in' selector=SelectorWith
		public Group getGroup() { return cGroup; }
		
		//'write'
		public Keyword getWriteKeyword_0() { return cWriteKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//selector=SelectorWith
		public Assignment getSelectorAssignment_3() { return cSelectorAssignment_3; }
		
		//SelectorWith
		public RuleCall getSelectorSelectorWithParserRuleCall_3_0() { return cSelectorSelectorWithParserRuleCall_3_0; }
	}
	public class UncheckAllActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.UncheckAllAction");
		private final Keyword cUncheck_allKeyword = (Keyword)rule.eContents().get(1);
		
		//UncheckAllAction:
		//    'uncheck_all'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'uncheck_all'
		public Keyword getUncheck_allKeyword() { return cUncheck_allKeyword; }
	}
	public class SelectActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.SelectAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOptionSelectorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOptionSelectorWithAttributeParserRuleCall_1_0_0 = (RuleCall)cOptionSelectorAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Assignment cAndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAndAndParserRuleCall_1_2_0 = (RuleCall)cAndAssignment_1_2.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSelectorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelectorSelectorWithParserRuleCall_3_0 = (RuleCall)cSelectorAssignment_3.eContents().get(0);
		
		//SelectAction:
		//    'select' (optionSelector?=WithAttribute value=STRING and+=(And)*)? 'from' selector=SelectorWith
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' (optionSelector?=WithAttribute value=STRING and+=(And)*)? 'from' selector=SelectorWith
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//(optionSelector?=WithAttribute value=STRING and+=(And)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//optionSelector?=WithAttribute
		public Assignment getOptionSelectorAssignment_1_0() { return cOptionSelectorAssignment_1_0; }
		
		//WithAttribute
		public RuleCall getOptionSelectorWithAttributeParserRuleCall_1_0_0() { return cOptionSelectorWithAttributeParserRuleCall_1_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//and+=(And)*
		public Assignment getAndAssignment_1_2() { return cAndAssignment_1_2; }
		
		//(And)
		public RuleCall getAndAndParserRuleCall_1_2_0() { return cAndAndParserRuleCall_1_2_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//selector=SelectorWith
		public Assignment getSelectorAssignment_3() { return cSelectorAssignment_3; }
		
		//SelectorWith
		public RuleCall getSelectorSelectorWithParserRuleCall_3_0() { return cSelectorSelectorWithParserRuleCall_3_0; }
	}
	public class SelectorWithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.SelectorWith");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBase_selectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBase_selectorSTRINGTerminalRuleCall_0_0 = (RuleCall)cBase_selectorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cWWithParserRuleCall_1_0_0 = (RuleCall)cWAssignment_1_0.eContents().get(0);
		private final Assignment cAndAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAndAndParserRuleCall_1_1_0 = (RuleCall)cAndAssignment_1_1.eContents().get(0);
		
		//SelectorWith:
		//    base_selector=STRING (w=With and+=(And)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//base_selector=STRING (w=With and+=(And)*)?
		public Group getGroup() { return cGroup; }
		
		//base_selector=STRING
		public Assignment getBase_selectorAssignment_0() { return cBase_selectorAssignment_0; }
		
		//STRING
		public RuleCall getBase_selectorSTRINGTerminalRuleCall_0_0() { return cBase_selectorSTRINGTerminalRuleCall_0_0; }
		
		//(w=With and+=(And)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//w=With
		public Assignment getWAssignment_1_0() { return cWAssignment_1_0; }
		
		//With
		public RuleCall getWWithParserRuleCall_1_0_0() { return cWWithParserRuleCall_1_0_0; }
		
		//and+=(And)*
		public Assignment getAndAssignment_1_1() { return cAndAssignment_1_1; }
		
		//(And)
		public RuleCall getAndAndParserRuleCall_1_1_0() { return cAndAndParserRuleCall_1_1_0; }
	}
	public class WithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.With");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWithAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWithAttributeWithAttributeParserRuleCall_0_0 = (RuleCall)cWithAttributeAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//With:
		//    withAttribute=WithAttribute value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//withAttribute=WithAttribute value=Value
		public Group getGroup() { return cGroup; }
		
		//withAttribute=WithAttribute
		public Assignment getWithAttributeAssignment_0() { return cWithAttributeAssignment_0; }
		
		//WithAttribute
		public RuleCall getWithAttributeWithAttributeParserRuleCall_0_0() { return cWithAttributeWithAttributeParserRuleCall_0_0; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}
	public class WithAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.WithAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeIDTerminalRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		
		//WithAttribute:
		//    'with' attribute=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' attribute=ID
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_1_0() { return cAttributeIDTerminalRuleCall_1_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAndAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAndAttributeAndAttributeParserRuleCall_0_0 = (RuleCall)cAndAttributeAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//And:
		//    andAttribute=AndAttribute value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//andAttribute=AndAttribute value=Value
		public Group getGroup() { return cGroup; }
		
		//andAttribute=AndAttribute
		public Assignment getAndAttributeAssignment_0() { return cAndAttributeAssignment_0; }
		
		//AndAttribute
		public RuleCall getAndAttributeAndAttributeParserRuleCall_0_0() { return cAndAttributeAndAttributeParserRuleCall_0_0; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}
	public class AndAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.AndAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeIDTerminalRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		
		//AndAttribute:
		//    'and' attribute=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'and' attribute=ID
		public Group getGroup() { return cGroup; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_1_0() { return cAttributeIDTerminalRuleCall_1_0; }
	}
	public class SelectorHasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.SelectorHas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBase_selectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBase_selectorSTRINGTerminalRuleCall_0_0 = (RuleCall)cBase_selectorAssignment_0.eContents().get(0);
		private final Keyword cHasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeIDTerminalRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SelectorHas:
		//    base_selector=STRING 'has' attribute=ID value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//base_selector=STRING 'has' attribute=ID value=Value
		public Group getGroup() { return cGroup; }
		
		//base_selector=STRING
		public Assignment getBase_selectorAssignment_0() { return cBase_selectorAssignment_0; }
		
		//STRING
		public RuleCall getBase_selectorSTRINGTerminalRuleCall_0_0() { return cBase_selectorSTRINGTerminalRuleCall_0_0; }
		
		//'has'
		public Keyword getHasKeyword_1() { return cHasKeyword_1; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_2_0() { return cAttributeIDTerminalRuleCall_2_0; }
		
		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }
	}
	public class VariableActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.VariableAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAssignationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignationVariableAssignationParserRuleCall_2_0 = (RuleCall)cAssignationAssignment_2.eContents().get(0);
		
		//VariableAction:
		//    'let' name=ID assignation=VariableAssignation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' name=ID assignation=VariableAssignation
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//assignation=VariableAssignation
		public Assignment getAssignationAssignment_2() { return cAssignationAssignment_2; }
		
		//VariableAssignation
		public RuleCall getAssignationVariableAssignationParserRuleCall_2_0() { return cAssignationVariableAssignationParserRuleCall_2_0; }
	}
	public class VariableAssignationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.VariableAssignation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeIDTerminalRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSelectorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelectorSelectorWithParserRuleCall_3_0 = (RuleCall)cSelectorAssignment_3.eContents().get(0);
		
		//VariableAssignation:
		//    'as' attribute=ID 'from' selector=SelectorWith
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'as' attribute=ID 'from' selector=SelectorWith
		public Group getGroup() { return cGroup; }
		
		//'as'
		public Keyword getAsKeyword_0() { return cAsKeyword_0; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_1_0() { return cAttributeIDTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//selector=SelectorWith
		public Assignment getSelectorAssignment_3() { return cSelectorAssignment_3; }
		
		//SelectorWith
		public RuleCall getSelectorSelectorWithParserRuleCall_3_0() { return cSelectorSelectorWithParserRuleCall_3_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cValueVariableActionCrossReference_0_0 = (CrossReference)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueVariableActionIDTerminalRuleCall_0_0_1 = (RuleCall)cValueVariableActionCrossReference_0_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//    value=[VariableAction] | STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=[VariableAction] | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=[VariableAction]
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//[VariableAction]
		public CrossReference getValueVariableActionCrossReference_0_0() { return cValueVariableActionCrossReference_0_0; }
		
		//ID
		public RuleCall getValueVariableActionIDTerminalRuleCall_0_0_1() { return cValueVariableActionIDTerminalRuleCall_0_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final TestElements pTest;
	private final ActionElements pAction;
	private final GotoActionElements pGotoAction;
	private final ClickActionElements pClickAction;
	private final AssertActionElements pAssertAction;
	private final WriteActionElements pWriteAction;
	private final UncheckAllActionElements pUncheckAllAction;
	private final SelectActionElements pSelectAction;
	private final SelectorWithElements pSelectorWith;
	private final WithElements pWith;
	private final WithAttributeElements pWithAttribute;
	private final AndElements pAnd;
	private final AndAttributeElements pAndAttribute;
	private final SelectorHasElements pSelectorHas;
	private final VariableActionElements pVariableAction;
	private final VariableAssignationElements pVariableAssignation;
	private final ValueElements pValue;
	private final TerminalRule tURL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SeleniumScriptGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTest = new TestElements();
		this.pAction = new ActionElements();
		this.pGotoAction = new GotoActionElements();
		this.pClickAction = new ClickActionElements();
		this.pAssertAction = new AssertActionElements();
		this.pWriteAction = new WriteActionElements();
		this.pUncheckAllAction = new UncheckAllActionElements();
		this.pSelectAction = new SelectActionElements();
		this.pSelectorWith = new SelectorWithElements();
		this.pWith = new WithElements();
		this.pWithAttribute = new WithAttributeElements();
		this.pAnd = new AndElements();
		this.pAndAttribute = new AndAttributeElements();
		this.pSelectorHas = new SelectorHasElements();
		this.pVariableAction = new VariableActionElements();
		this.pVariableAssignation = new VariableAssignationElements();
		this.pValue = new ValueElements();
		this.tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SeleniumScript.URL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.SeleniumScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    tests+=Test*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Test:
	//    'test' name=ID':'
	//        (
	//            actions+=Action
	//        )+
	//;
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	//Action:
	//    GotoAction | ClickAction | AssertAction | WriteAction | {Action} UncheckAllAction | SelectAction | VariableAction
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//GotoAction:
	//    'goto' url=URL
	//;
	public GotoActionElements getGotoActionAccess() {
		return pGotoAction;
	}
	
	public ParserRule getGotoActionRule() {
		return getGotoActionAccess().getRule();
	}
	
	//ClickAction:
	//    'click' selector=SelectorWith
	//;
	public ClickActionElements getClickActionAccess() {
		return pClickAction;
	}
	
	public ParserRule getClickActionRule() {
		return getClickActionAccess().getRule();
	}
	
	//AssertAction:
	//    'assert' selector=SelectorHas
	//;
	public AssertActionElements getAssertActionAccess() {
		return pAssertAction;
	}
	
	public ParserRule getAssertActionRule() {
		return getAssertActionAccess().getRule();
	}
	
	//WriteAction:
	//    'write' value=STRING 'in' selector=SelectorWith
	//;
	public WriteActionElements getWriteActionAccess() {
		return pWriteAction;
	}
	
	public ParserRule getWriteActionRule() {
		return getWriteActionAccess().getRule();
	}
	
	//UncheckAllAction:
	//    'uncheck_all'
	//;
	public UncheckAllActionElements getUncheckAllActionAccess() {
		return pUncheckAllAction;
	}
	
	public ParserRule getUncheckAllActionRule() {
		return getUncheckAllActionAccess().getRule();
	}
	
	//SelectAction:
	//    'select' (optionSelector?=WithAttribute value=STRING and+=(And)*)? 'from' selector=SelectorWith
	//;
	public SelectActionElements getSelectActionAccess() {
		return pSelectAction;
	}
	
	public ParserRule getSelectActionRule() {
		return getSelectActionAccess().getRule();
	}
	
	//SelectorWith:
	//    base_selector=STRING (w=With and+=(And)*)?
	//;
	public SelectorWithElements getSelectorWithAccess() {
		return pSelectorWith;
	}
	
	public ParserRule getSelectorWithRule() {
		return getSelectorWithAccess().getRule();
	}
	
	//With:
	//    withAttribute=WithAttribute value=Value
	//;
	public WithElements getWithAccess() {
		return pWith;
	}
	
	public ParserRule getWithRule() {
		return getWithAccess().getRule();
	}
	
	//WithAttribute:
	//    'with' attribute=ID
	//;
	public WithAttributeElements getWithAttributeAccess() {
		return pWithAttribute;
	}
	
	public ParserRule getWithAttributeRule() {
		return getWithAttributeAccess().getRule();
	}
	
	//And:
	//    andAttribute=AndAttribute value=Value
	//;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//AndAttribute:
	//    'and' attribute=ID
	//;
	public AndAttributeElements getAndAttributeAccess() {
		return pAndAttribute;
	}
	
	public ParserRule getAndAttributeRule() {
		return getAndAttributeAccess().getRule();
	}
	
	//SelectorHas:
	//    base_selector=STRING 'has' attribute=ID value=Value
	//;
	public SelectorHasElements getSelectorHasAccess() {
		return pSelectorHas;
	}
	
	public ParserRule getSelectorHasRule() {
		return getSelectorHasAccess().getRule();
	}
	
	//VariableAction:
	//    'let' name=ID assignation=VariableAssignation
	//;
	public VariableActionElements getVariableActionAccess() {
		return pVariableAction;
	}
	
	public ParserRule getVariableActionRule() {
		return getVariableActionAccess().getRule();
	}
	
	//VariableAssignation:
	//    'as' attribute=ID 'from' selector=SelectorWith
	//;
	public VariableAssignationElements getVariableAssignationAccess() {
		return pVariableAssignation;
	}
	
	public ParserRule getVariableAssignationRule() {
		return getVariableAssignationAccess().getRule();
	}
	
	//Value:
	//    value=[VariableAction] | STRING
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal URL:
	//    'http' ('s'?) '://' ('www.'?) ('a'..'z' | 'A'..'Z' | '0'..'9' | '-' | '.')+ ('/' ('a'..'z' | 'A'..'Z' | '0'..'9' | '-' | '_' | '.' | '~' | '?' | '&' | '=' | '%')*)?
	//    ;
	public TerminalRule getURLRule() {
		return tURL;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
