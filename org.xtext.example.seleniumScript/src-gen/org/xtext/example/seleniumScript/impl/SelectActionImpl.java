/**
 * generated by Xtext 2.36.0
 */
package org.xtext.example.seleniumScript.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.seleniumScript.And;
import org.xtext.example.seleniumScript.SelectAction;
import org.xtext.example.seleniumScript.SelectorWith;
import org.xtext.example.seleniumScript.SeleniumScriptPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Select Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.seleniumScript.impl.SelectActionImpl#isOptionSelector <em>Option Selector</em>}</li>
 *   <li>{@link org.xtext.example.seleniumScript.impl.SelectActionImpl#getValue <em>Value</em>}</li>
 *   <li>{@link org.xtext.example.seleniumScript.impl.SelectActionImpl#getAnd <em>And</em>}</li>
 *   <li>{@link org.xtext.example.seleniumScript.impl.SelectActionImpl#getSelector <em>Selector</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectActionImpl extends ActionImpl implements SelectAction
{
  /**
   * The default value of the '{@link #isOptionSelector() <em>Option Selector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOptionSelector()
   * @generated
   * @ordered
   */
  protected static final boolean OPTION_SELECTOR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOptionSelector() <em>Option Selector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOptionSelector()
   * @generated
   * @ordered
   */
  protected boolean optionSelector = OPTION_SELECTOR_EDEFAULT;

  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final String VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected String value = VALUE_EDEFAULT;

  /**
   * The cached value of the '{@link #getAnd() <em>And</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnd()
   * @generated
   * @ordered
   */
  protected EList<And> and;

  /**
   * The cached value of the '{@link #getSelector() <em>Selector</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelector()
   * @generated
   * @ordered
   */
  protected SelectorWith selector;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SeleniumScriptPackage.Literals.SELECT_ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOptionSelector()
  {
    return optionSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOptionSelector(boolean newOptionSelector)
  {
    boolean oldOptionSelector = optionSelector;
    optionSelector = newOptionSelector;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECT_ACTION__OPTION_SELECTOR, oldOptionSelector, optionSelector));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(String newValue)
  {
    String oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECT_ACTION__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<And> getAnd()
  {
    if (and == null)
    {
      and = new EObjectContainmentEList<And>(And.class, this, SeleniumScriptPackage.SELECT_ACTION__AND);
    }
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectorWith getSelector()
  {
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelector(SelectorWith newSelector, NotificationChain msgs)
  {
    SelectorWith oldSelector = selector;
    selector = newSelector;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECT_ACTION__SELECTOR, oldSelector, newSelector);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelector(SelectorWith newSelector)
  {
    if (newSelector != selector)
    {
      NotificationChain msgs = null;
      if (selector != null)
        msgs = ((InternalEObject)selector).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SeleniumScriptPackage.SELECT_ACTION__SELECTOR, null, msgs);
      if (newSelector != null)
        msgs = ((InternalEObject)newSelector).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SeleniumScriptPackage.SELECT_ACTION__SELECTOR, null, msgs);
      msgs = basicSetSelector(newSelector, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECT_ACTION__SELECTOR, newSelector, newSelector));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECT_ACTION__AND:
        return ((InternalEList<?>)getAnd()).basicRemove(otherEnd, msgs);
      case SeleniumScriptPackage.SELECT_ACTION__SELECTOR:
        return basicSetSelector(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECT_ACTION__OPTION_SELECTOR:
        return isOptionSelector();
      case SeleniumScriptPackage.SELECT_ACTION__VALUE:
        return getValue();
      case SeleniumScriptPackage.SELECT_ACTION__AND:
        return getAnd();
      case SeleniumScriptPackage.SELECT_ACTION__SELECTOR:
        return getSelector();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECT_ACTION__OPTION_SELECTOR:
        setOptionSelector((Boolean)newValue);
        return;
      case SeleniumScriptPackage.SELECT_ACTION__VALUE:
        setValue((String)newValue);
        return;
      case SeleniumScriptPackage.SELECT_ACTION__AND:
        getAnd().clear();
        getAnd().addAll((Collection<? extends And>)newValue);
        return;
      case SeleniumScriptPackage.SELECT_ACTION__SELECTOR:
        setSelector((SelectorWith)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECT_ACTION__OPTION_SELECTOR:
        setOptionSelector(OPTION_SELECTOR_EDEFAULT);
        return;
      case SeleniumScriptPackage.SELECT_ACTION__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
      case SeleniumScriptPackage.SELECT_ACTION__AND:
        getAnd().clear();
        return;
      case SeleniumScriptPackage.SELECT_ACTION__SELECTOR:
        setSelector((SelectorWith)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECT_ACTION__OPTION_SELECTOR:
        return optionSelector != OPTION_SELECTOR_EDEFAULT;
      case SeleniumScriptPackage.SELECT_ACTION__VALUE:
        return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);
      case SeleniumScriptPackage.SELECT_ACTION__AND:
        return and != null && !and.isEmpty();
      case SeleniumScriptPackage.SELECT_ACTION__SELECTOR:
        return selector != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (optionSelector: ");
    result.append(optionSelector);
    result.append(", value: ");
    result.append(value);
    result.append(')');
    return result.toString();
  }

} //SelectActionImpl
