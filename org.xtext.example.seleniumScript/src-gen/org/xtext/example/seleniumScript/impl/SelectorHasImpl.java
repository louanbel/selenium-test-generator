/**
 * generated by Xtext 2.36.0
 */
package org.xtext.example.seleniumScript.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.seleniumScript.SelectorHas;
import org.xtext.example.seleniumScript.SeleniumScriptPackage;
import org.xtext.example.seleniumScript.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Selector Has</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.seleniumScript.impl.SelectorHasImpl#getBase_selector <em>Base selector</em>}</li>
 *   <li>{@link org.xtext.example.seleniumScript.impl.SelectorHasImpl#getAttribute <em>Attribute</em>}</li>
 *   <li>{@link org.xtext.example.seleniumScript.impl.SelectorHasImpl#getValue <em>Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectorHasImpl extends MinimalEObjectImpl.Container implements SelectorHas
{
  /**
   * The default value of the '{@link #getBase_selector() <em>Base selector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBase_selector()
   * @generated
   * @ordered
   */
  protected static final String BASE_SELECTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBase_selector() <em>Base selector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBase_selector()
   * @generated
   * @ordered
   */
  protected String base_selector = BASE_SELECTOR_EDEFAULT;

  /**
   * The default value of the '{@link #getAttribute() <em>Attribute</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttribute()
   * @generated
   * @ordered
   */
  protected static final String ATTRIBUTE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAttribute() <em>Attribute</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttribute()
   * @generated
   * @ordered
   */
  protected String attribute = ATTRIBUTE_EDEFAULT;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected Value value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectorHasImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SeleniumScriptPackage.Literals.SELECTOR_HAS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBase_selector()
  {
    return base_selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBase_selector(String newBase_selector)
  {
    String oldBase_selector = base_selector;
    base_selector = newBase_selector;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECTOR_HAS__BASE_SELECTOR, oldBase_selector, base_selector));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAttribute()
  {
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttribute(String newAttribute)
  {
    String oldAttribute = attribute;
    attribute = newAttribute;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECTOR_HAS__ATTRIBUTE, oldAttribute, attribute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValue(Value newValue, NotificationChain msgs)
  {
    Value oldValue = value;
    value = newValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECTOR_HAS__VALUE, oldValue, newValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(Value newValue)
  {
    if (newValue != value)
    {
      NotificationChain msgs = null;
      if (value != null)
        msgs = ((InternalEObject)value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SeleniumScriptPackage.SELECTOR_HAS__VALUE, null, msgs);
      if (newValue != null)
        msgs = ((InternalEObject)newValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SeleniumScriptPackage.SELECTOR_HAS__VALUE, null, msgs);
      msgs = basicSetValue(newValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECTOR_HAS__VALUE, newValue, newValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTOR_HAS__VALUE:
        return basicSetValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTOR_HAS__BASE_SELECTOR:
        return getBase_selector();
      case SeleniumScriptPackage.SELECTOR_HAS__ATTRIBUTE:
        return getAttribute();
      case SeleniumScriptPackage.SELECTOR_HAS__VALUE:
        return getValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTOR_HAS__BASE_SELECTOR:
        setBase_selector((String)newValue);
        return;
      case SeleniumScriptPackage.SELECTOR_HAS__ATTRIBUTE:
        setAttribute((String)newValue);
        return;
      case SeleniumScriptPackage.SELECTOR_HAS__VALUE:
        setValue((Value)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTOR_HAS__BASE_SELECTOR:
        setBase_selector(BASE_SELECTOR_EDEFAULT);
        return;
      case SeleniumScriptPackage.SELECTOR_HAS__ATTRIBUTE:
        setAttribute(ATTRIBUTE_EDEFAULT);
        return;
      case SeleniumScriptPackage.SELECTOR_HAS__VALUE:
        setValue((Value)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTOR_HAS__BASE_SELECTOR:
        return BASE_SELECTOR_EDEFAULT == null ? base_selector != null : !BASE_SELECTOR_EDEFAULT.equals(base_selector);
      case SeleniumScriptPackage.SELECTOR_HAS__ATTRIBUTE:
        return ATTRIBUTE_EDEFAULT == null ? attribute != null : !ATTRIBUTE_EDEFAULT.equals(attribute);
      case SeleniumScriptPackage.SELECTOR_HAS__VALUE:
        return value != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (base_selector: ");
    result.append(base_selector);
    result.append(", attribute: ");
    result.append(attribute);
    result.append(')');
    return result.toString();
  }

} //SelectorHasImpl
