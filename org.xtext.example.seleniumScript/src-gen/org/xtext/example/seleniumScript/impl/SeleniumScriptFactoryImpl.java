/**
 * generated by Xtext 2.36.0
 */
package org.xtext.example.seleniumScript.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.seleniumScript.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SeleniumScriptFactoryImpl extends EFactoryImpl implements SeleniumScriptFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SeleniumScriptFactory init()
  {
    try
    {
      SeleniumScriptFactory theSeleniumScriptFactory = (SeleniumScriptFactory)EPackage.Registry.INSTANCE.getEFactory(SeleniumScriptPackage.eNS_URI);
      if (theSeleniumScriptFactory != null)
      {
        return theSeleniumScriptFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SeleniumScriptFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SeleniumScriptFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SeleniumScriptPackage.MODEL: return createModel();
      case SeleniumScriptPackage.TEST: return createTest();
      case SeleniumScriptPackage.ACTION: return createAction();
      case SeleniumScriptPackage.GOTO_ACTION: return createGotoAction();
      case SeleniumScriptPackage.CLICK_ACTION: return createClickAction();
      case SeleniumScriptPackage.ASSERT_ACTION: return createAssertAction();
      case SeleniumScriptPackage.WRITE_ACTION: return createWriteAction();
      case SeleniumScriptPackage.SELECT_ACTION: return createSelectAction();
      case SeleniumScriptPackage.SELECTOR_WITH: return createSelectorWith();
      case SeleniumScriptPackage.WITH: return createWith();
      case SeleniumScriptPackage.WITH_ATTRIBUTE: return createWithAttribute();
      case SeleniumScriptPackage.AND: return createAnd();
      case SeleniumScriptPackage.AND_ATTRIBUTE: return createAndAttribute();
      case SeleniumScriptPackage.SELECTOR_HAS: return createSelectorHas();
      case SeleniumScriptPackage.VARIABLE_ACTION: return createVariableAction();
      case SeleniumScriptPackage.VARIABLE_ASSIGNATION: return createVariableAssignation();
      case SeleniumScriptPackage.VALUE: return createValue();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Test createTest()
  {
    TestImpl test = new TestImpl();
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GotoAction createGotoAction()
  {
    GotoActionImpl gotoAction = new GotoActionImpl();
    return gotoAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClickAction createClickAction()
  {
    ClickActionImpl clickAction = new ClickActionImpl();
    return clickAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertAction createAssertAction()
  {
    AssertActionImpl assertAction = new AssertActionImpl();
    return assertAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WriteAction createWriteAction()
  {
    WriteActionImpl writeAction = new WriteActionImpl();
    return writeAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectAction createSelectAction()
  {
    SelectActionImpl selectAction = new SelectActionImpl();
    return selectAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectorWith createSelectorWith()
  {
    SelectorWithImpl selectorWith = new SelectorWithImpl();
    return selectorWith;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public With createWith()
  {
    WithImpl with = new WithImpl();
    return with;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WithAttribute createWithAttribute()
  {
    WithAttributeImpl withAttribute = new WithAttributeImpl();
    return withAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndAttribute createAndAttribute()
  {
    AndAttributeImpl andAttribute = new AndAttributeImpl();
    return andAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectorHas createSelectorHas()
  {
    SelectorHasImpl selectorHas = new SelectorHasImpl();
    return selectorHas;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableAction createVariableAction()
  {
    VariableActionImpl variableAction = new VariableActionImpl();
    return variableAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableAssignation createVariableAssignation()
  {
    VariableAssignationImpl variableAssignation = new VariableAssignationImpl();
    return variableAssignation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SeleniumScriptPackage getSeleniumScriptPackage()
  {
    return (SeleniumScriptPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SeleniumScriptPackage getPackage()
  {
    return SeleniumScriptPackage.eINSTANCE;
  }

} //SeleniumScriptFactoryImpl
