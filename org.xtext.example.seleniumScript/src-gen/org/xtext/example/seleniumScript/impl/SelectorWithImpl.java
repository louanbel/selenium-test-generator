/**
 * generated by Xtext 2.36.0
 */
package org.xtext.example.seleniumScript.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.seleniumScript.And;
import org.xtext.example.seleniumScript.SelectorWith;
import org.xtext.example.seleniumScript.SeleniumScriptPackage;
import org.xtext.example.seleniumScript.With;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Selector With</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.seleniumScript.impl.SelectorWithImpl#getBase_selector <em>Base selector</em>}</li>
 *   <li>{@link org.xtext.example.seleniumScript.impl.SelectorWithImpl#getW <em>W</em>}</li>
 *   <li>{@link org.xtext.example.seleniumScript.impl.SelectorWithImpl#getAnd <em>And</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectorWithImpl extends MinimalEObjectImpl.Container implements SelectorWith
{
  /**
   * The default value of the '{@link #getBase_selector() <em>Base selector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBase_selector()
   * @generated
   * @ordered
   */
  protected static final String BASE_SELECTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBase_selector() <em>Base selector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBase_selector()
   * @generated
   * @ordered
   */
  protected String base_selector = BASE_SELECTOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getW() <em>W</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getW()
   * @generated
   * @ordered
   */
  protected With w;

  /**
   * The cached value of the '{@link #getAnd() <em>And</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnd()
   * @generated
   * @ordered
   */
  protected EList<And> and;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectorWithImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SeleniumScriptPackage.Literals.SELECTOR_WITH;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBase_selector()
  {
    return base_selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBase_selector(String newBase_selector)
  {
    String oldBase_selector = base_selector;
    base_selector = newBase_selector;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECTOR_WITH__BASE_SELECTOR, oldBase_selector, base_selector));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public With getW()
  {
    return w;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetW(With newW, NotificationChain msgs)
  {
    With oldW = w;
    w = newW;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECTOR_WITH__W, oldW, newW);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setW(With newW)
  {
    if (newW != w)
    {
      NotificationChain msgs = null;
      if (w != null)
        msgs = ((InternalEObject)w).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SeleniumScriptPackage.SELECTOR_WITH__W, null, msgs);
      if (newW != null)
        msgs = ((InternalEObject)newW).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SeleniumScriptPackage.SELECTOR_WITH__W, null, msgs);
      msgs = basicSetW(newW, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleniumScriptPackage.SELECTOR_WITH__W, newW, newW));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<And> getAnd()
  {
    if (and == null)
    {
      and = new EObjectContainmentEList<And>(And.class, this, SeleniumScriptPackage.SELECTOR_WITH__AND);
    }
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTOR_WITH__W:
        return basicSetW(null, msgs);
      case SeleniumScriptPackage.SELECTOR_WITH__AND:
        return ((InternalEList<?>)getAnd()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTOR_WITH__BASE_SELECTOR:
        return getBase_selector();
      case SeleniumScriptPackage.SELECTOR_WITH__W:
        return getW();
      case SeleniumScriptPackage.SELECTOR_WITH__AND:
        return getAnd();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTOR_WITH__BASE_SELECTOR:
        setBase_selector((String)newValue);
        return;
      case SeleniumScriptPackage.SELECTOR_WITH__W:
        setW((With)newValue);
        return;
      case SeleniumScriptPackage.SELECTOR_WITH__AND:
        getAnd().clear();
        getAnd().addAll((Collection<? extends And>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTOR_WITH__BASE_SELECTOR:
        setBase_selector(BASE_SELECTOR_EDEFAULT);
        return;
      case SeleniumScriptPackage.SELECTOR_WITH__W:
        setW((With)null);
        return;
      case SeleniumScriptPackage.SELECTOR_WITH__AND:
        getAnd().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SeleniumScriptPackage.SELECTOR_WITH__BASE_SELECTOR:
        return BASE_SELECTOR_EDEFAULT == null ? base_selector != null : !BASE_SELECTOR_EDEFAULT.equals(base_selector);
      case SeleniumScriptPackage.SELECTOR_WITH__W:
        return w != null;
      case SeleniumScriptPackage.SELECTOR_WITH__AND:
        return and != null && !and.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (base_selector: ");
    result.append(base_selector);
    result.append(')');
    return result.toString();
  }

} //SelectorWithImpl
